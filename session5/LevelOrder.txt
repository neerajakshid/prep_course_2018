/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode A) {
    ArrayList<ArrayList<Integer>> res = new ArrayList<ArrayList<Integer>>();
        if (A == null)  return res;
        
        Deque<TreeNode> queue = new ArrayDeque<TreeNode>();
        queue.offer(A);
        
        while (!queue.isEmpty()) {
            int n = queue.size();
            ArrayList<Integer> al = new ArrayList<Integer>();
            for (int i = 0; i < n; i++) {
                A = queue.poll();
                al.add(A.val);
                if (A.left != null)     queue.add(A.left);
                if (A.right != null)    queue.add(A.right);
            }
            res.add(al);
        }
        
        return res;
    }
}